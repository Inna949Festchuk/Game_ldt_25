services:
  web:
    build: .
    container_name: django_web
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - ./app:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: django_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${SQL_DATABASE}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: django_redis
    restart: unless-stopped
  

  # celery:
  #   build: .
  #   container_name: django_celery
  #   command: celery -A core worker --loglevel=info
  #   volumes:
  #     - ./app:/app
  #   env_file:
  #     - .env
  #   depends_on:
  #     - web
  #     - redis
  #     - db
  #   restart: unless-stopped

  celery:
    build: .
    container_name: django_celery
    command: celery -A core worker --loglevel=info
    volumes:
      - ./app:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  nginx:
    image: nginx:1.25
    container_name: django_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped


  # # Мониторинг задач
  # flower:
  #   build: .
  #   command: celery -A core flower --port=5555
  #   ports:
  #     - "5555:5555"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - redis
  #     - db

volumes:
  postgres_data:
  static_volume:
  media_volume: